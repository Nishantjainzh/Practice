================================================================================================================================
				NODEJS PRACTISE
================================================================================================================================
1. Make server, anonymous, callback, module(module.exports) with import file, HTML webpage, send mail, readfile system
2. mysql connection, 
3. events - event emitter - we will use ON method and event emitter with emit function
4. Express JS - get(), routes, middleware, 
5. middleware with specific route - we will give 3rd perameter as next and will call next() within function
6. middleware with other file, open html file with router
7. Dynamic content - we will use set method('view engine', 'ejs') as well as res.render function and in html page we well print value thru <%=%>
8. common header, 
9. add static file - we will use css file thru express.static() function
10. form and query string with POST METHOD - we will use body-parser.urlencoded()
11. MODEL IN NODEJS - Model is like a database schema where we will put the info pertaining to the collections
model name should be like collection name
11. connect mongoDB, model for mongoDB, get data from mongodb
12. Node js default port - 8000
mongodb  27017
pga3Q5L1PmS3Ccep
mongodb+srv://nishantjainzh:pga3Q5L1PmS3Ccep@cluster0.0r2zm.mongodb.net/<dbname>?retryWrites=true&w=majority
node-tuto tutorial users
================================================================================================================================
				ANGULAR PRACTISE
================================================================================================================================
Pure and Impure pipe - NEED TO COMPLETE

JavaScript is a single-threaded programming language which means only one thing can happen at a time.
Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread

RxJS (Reactive Extensions for JavaScript) is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code
The library also provides utility functions for creating and working with observables.
RxJS is a library that lets us create and work with observables.

Injectable means Dependency injection

observables are simply a function that are able to give multiple values over time, either synchronously or asynchronously
An Observable is like a Stream (in many languages) and allows to pass zero or more events where the callback is called for each event.
With Observable it doesn't matter if you want to handle 0, 1, or multiple events.

the main difference between a promise and an observable is that a promise emits only a single value, whereas an observable emits multiple values.

GULP- Dist and src folder would be created
GLUNT 
Interceptors allow us to intercept incoming or outgoing HTTP requests using the HttpClient
we will generate the inceptor and it should be register in module.ts under the provider with [provide:HTTP_INTERCEPTORS,useClass:BoyInterceptor,multi:true  ]

service get and set methods - NEED TO COMPLETE

var- we can declare again it and we can rewrite the value again
let -we can rewrite the value but we can not declare it again.
const-neither we can declare nor rewrite value.

hoisting- variables and function declarations are moved to the top of their scope before code execution - in this case function will be print but variable would become undefind.

Closure - to use the outside function variable in the inner function and closures can be perform with local variable and global variable.

pipes - uppercase, lowercase ,titlecase

Route Guard- need to generate Guard and service

@view child-USING COMPONENT -  its a decorator and it is used for component communication. if a parent component wants to use child component then we can use it. 
@view child-USING TEMPLATE VARIBALE-  its a decorator. WE will use ElementRef in it. 

directives- It is use for modify the DOM and HTML Element.We will use ElementRef in it.
Directives are classes that add additional behavior to elements in your Angular applications.
With Angular's built-in directives, you can manage forms, lists, styles, and what users see.

web pack gulp grunt

VARIABLES-
<var - this can be define multiple time and we can change the value
let - we can not define again but we can change the value
constant - neither we can change the value nor define it again.>

DATA TYPES
<String, Number, Boolean, Array, Object, Null>

OPERATORS
<AND  -  &&
OR  -  || 
AND  -  && 
>

BOX
<alert();
prompt();
confirm();>

CONSOLE
<console.log("")
console.warn();
document.write();
console.table([1,2,3])
console.error()>
<Below console would be use togeather.>
console.time("test")
console.Endtime("test")

FUNCTION DEFINE
function myFunction(){
	Statement ----->
}					

ARRAY METHOD <Array methods will be use with . >
	var a = [ 1,2,3];
	a.sort()
sort() - it will sort the array in alphabetical order or in number series order
reverse() - it will reverse the values of array 
pop() - it will delete the last value of the array
push(value) - it will add the value in the last in the array.
shift()- it will delete the first value of the array
unshift() - it will add the value in the beginning in the array.
concat() - it will add the arrays value
join()

New feature of ANGULAR 11
Updated HMR
type script 5 suppot
webpack 5 support
moved from Tslint to ESLint
remove support from IE 9, 10

WEBPACK- its a bundler which put all the JS file in a single JS file. Webpack has its own server , the name is webpack-dev-server
GULP- Dist and src folder would be created
GLUNT

INTERCEPTOR- It is like a middleware
Interceptors are a unique type of Angular Service that we can implement.
Interceptors allow us to intercept incoming or outgoing HTTP requests using the HttpClient . 
By intercepting the HTTP request, we can modify or change the value of the request

Functions running in parallel with other functions are called asynchronous
A good example is JavaScript setTimeout()

ngOnInit() is a place to put the code that we need to execute at very first as soon as the class is instantiated.
Constructor initialize class members.

ActivatedRoute Contains the information about a route associated with a component loaded in an outlet. 
It can also be used to pass data from one component to another component using route such as Id, flag, state etc.

SnapShot - If you don't want to update your URL parameter within the same component you are accessing it, then you can use the snapshot

ParamMap - A map that provides access to the required and optional parameters specific to a route. 
The map supports retrieving a single value with get() or multiple values with getAll().

npm init command for create the package.json

ExpressJS manages the workflow between the front-end and the database and facilitates a smooth and secure transfer of data

Mongoose, you can define objects with a strongly-typed schema that can be further mapped to a MongoDB document.
Mongoose comes with built-in typecasting, validation, query building, business logic hooks, and many more out-of-the-box features.
We use the mongoose db library for connnect the mongo db database.
Mongoose is a mongoDB Object Data Modeling(ODM) library for MongoDb and nodeJs.

Angular gives us 8 hooks to allow us to tap into the lifecycle of our components and trigger actions at specific points in the lifecycle.

ngOnChanges ngOnInit  ngDoCheck   ngAfterContentInit  ngAfterContentChecked ngAfterViewInit ngAfterViewChecked  ngOnDestroy

decorators are functions that allow a service, directive or filter to be modified prior to its usage
It adds additional metadata information like the template, selector name, styles etc.

CORS (cross-origin resource sharing)
CORS allows servers to specify who (i.e., which origins) can access the assets on the server, among many other things.

SERVICE
The main objective of a service is to organize and share business logic, models, or data and functions with different components of an Angular application.

Interface defines what the properties of an object should have as a name and as a type.

100905175345
.\canhsbcadmin
C#0!cEw!llFly2Five

ng config -g cli.warnings.versionMismatch false

bubble evnt
spread rest opertor
higher orders function
templat literal 
object restruture
map
timer module
save and insert difference in mongo
arrow function








