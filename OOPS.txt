1. There are 3 types of method in JS oop
	constructer - we need to create object of class and this constructer function will be call automatically.
	prototype - we need to define the name of function and need to create object of class for calling the function.
	static - no need to create object for calling static function. we need to add static before the function name.

2. Inheritance- Means to use the method and properties of existing class.
	To create a class inheritance, use the extends keyword.
The super() method refers to the parent class.
By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.

3. A callback function is a function passed as as arugument in another function.

4.Prototypes are the mechanism by which JavaScript objects inherit features from one another.All JavaScript objects inherit properties and methods from a prototype.

5.Deep copy( to copy a object under a object) and shawallo copy (to copy a object) - in object info will be pass thru reference and in variable the info will be pass thru value.

6. A lexical scope in JavaScript means that a variable defined outside a function can be accessible inside another function.
But the opposite is not true; the variables defined inside a function will not be accessible outside that function.

7. arrow function does not have this. but normal function have own this.

8. 
=================
add/multiple/substract array
=================
let valuearr = [ 4,5,65,4, 1,2,3 ,1,2,2,3]

const result = valuearr.reduce((x, y)=> return x+y);
console.log(result);
9. =================================
remove duplicate array value
=====================================

const newresult = new Set(valuearr);
console.log([...newresult]);
valuearr.length = 5;

10. comma operator
let x = 10;
x = (x++, x) // first value x++ will be execute and 2nd value x would be print.
console.log(x)

11. Event loop -The event loop is a constantly running process that monitors both the callback queue and the call stack. 
If the call stack is not empty, the event loop waits until it is empty and places the next function from the callback queue to the call stack.
Event Loop has one simple job — to monitor that, is there any task to handle.

12. Nodejs - it's a runtime environment that's used to run JavaScript outside the browser.Node. js is non blocking environment.
 Node. js is a server-side scripting language based on the Google Chrome V8 engine.

13. Event-driven programming the occurrence of multiple events and to make the program as simple as possible. 
The basic components of an Event-Driven Program are: A callback function ( called an event handler) is called when an event is triggered.

14. Disadvantage Node js-
Reduces performance when handling Heavy Computing Tasks.
Node.js invites a lot of code changes due to Unstable API.
Node.js Asynchronous Programming Model makes it difficult to maintain code.

15. Java script ES6
java Script Arrow function ()=>{}
IIFE (function(){})()	Immidiate Invoked function
JavaScript Destructuring
rest operator and spread operator

16. call() method allows an object to use the method (function) of another object.
call() method takes arguments separately whereas, apply() method takes arguments as an array.
bind() method returns a new function, where the value of “this” keyword will be bound to the owner object, which is provided as a parameter.

17. Closures is an ability of a function to remember the variables and functions that are declared in its outer scope.

18. Arrow functin dont have its this keyword but regular function have its this keyword.

19. Prototype: All JavaScript objects inherit properties and methods from a prototype.
Date objects inherit from Date.prototype
Array objects inherit from Array.prototype
Person objects inherit from Person.prototype
The Object.prototype is on the top of the prototype inheritance chain:

20. Blocking refers to operations that block further execution until that operation finishes while non-blocking refers to code that doesn't block execution
A non-blocking call in JavaScript provides a callback function that is to be called when the operation is complete

Blocking is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. 
This happens because the event loop is unable to continue running JavaScript while a blocking operation is occurring.
Blocking methods execute synchronously and non-blocking methods execute asynchronously.

const fs = require('fs');
const data = fs.readFileSync('/file.md'); // blocks here until file is read

const fs = require('fs');
fs.readFile('/file.md', (err, data) => {
  if (err) throw err;
});

21. Web worker is being use for multiple threads.

22. Child process -  to perform more than one function simultaneously so we need child process.
there are 4 child process.
spawn() method - exit, disconnect, error, close and message
fork() method
exec() method
execFile() method

23. Replication can be simply understood as the duplication of the data-set whereas sharding is partitioning the data-set into discrete parts. 
The set of servers that maintain the same copy of data is known as replica servers or MongoDB instances.

By sharding, you divided your collection into different parts.
Sharding is a method for allocating data across multiple machines. MongoDB used sharding to help deployment with very big data.
By sharding, you combine more devices to carry data extension and the needs of read and write operations.

24. MongoDB is not a relational database, but you can perform a left outer join by using the $lookup stage.

25.  Capped collections - we can not delete doucment from a capped collection. if this collection will take new insertion then oldest document will be deleted.
it restriced the updates in the collection.
{capped:true,size:10000}

26. TTL (Time-To-Live) indexes are special single-field indexes that MongoDB can use to automatically remove documents from a collection after a certain amount of time.
It removes expired documents from the collection.

27. Middleware has access of request and response and the next middleware function in the application's request-response cycle.
 It acts like the connective tissue between applications, data, and users.

28. pipe in angular- it detect changes in the application.